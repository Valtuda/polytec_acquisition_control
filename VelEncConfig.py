# This file will follow more or less the same structure as the Polytec-constructed DaqConfig.
# I have chosen to split the files because it makes it easier to keep track of modifications.
# This library will be completely geared to the equipment used in Utrecht. I welcome additions to generalize it.

# ConfigurationError Exception class from DaqConfig (c) 2021 Polytec GmbH, Waldbrunn, LGPLv3

# Copyright (c) 2022 Jasper Smits
# Released under the terms of the GNU Lesser General Public License version 3

from polytec.io.device_type import DeviceType
from polytec.io.device_command import DeviceCommand
from polytec.io.item_list import ItemList


# We intent to expose the following variables, asterisk for read-only.
#
# - Bandwidth
# - Tracking Filter
# - Max. Acceleration*
# - Range
# - High Pass Filter
# - Max. Velocity
# - Optimum Range*
#
# For each of these variables we need a setter, getter, and a function that lists available modes.
# We will follow the same path as in the DaqConfig class.
# We initialize the ItemList objects in the same way.

class VelEncConfig:
    """Configuration class for the Velocity encoder on a VibroFlex Connect with VibroFlex QTec head."""

    def __init__(self,device_communication):
        """
        Constructor
        
        Arguments:
        - device_communication instance from the polytec library
        """
        self.__communication = device_communication

        ## Below is auto-generated by the function_writer utility. Copy-pasted in manually
        self.__bandwidth = ItemList(self.__communication, DeviceType.VelocityDecoderDigital, DeviceCommand.Bandwidth)
        self.__range = ItemList(self.__communication, DeviceType.VelocityDecoderDigital, DeviceCommand.Range)
        self.__tracking_filter = ItemList(self.__communication, DeviceType.VelocityDecoderDigital, DeviceCommand.TrackingFilterRange)

    # Bandwidth
    @property
    def bandwidth(self):
        """Gets the Bandwidth"""
        return self.__bandwidth.current_item()
    
    @bandwidth.setter
    def bandwidth(self,new_value):
        """Sets the Bandwidth"""
        if self.__bandwidth.is_item_available(new_value):
            self.__bandwidth.set_current_item(new_value)
        else:
            raise ConfigurationError(f"Bandwidth mode not available: {new_value}. Available values: {self.all_bandwidth()}.")

    def all_bandwidth(self):
        """Gets all available settings for property Bandwidth"""
        return self.__bandwidth.available_items()

    # Velocity Range
    @property
    def range(self):
        """Gets the Velocity Range"""
        return self.__range.current_item()
    
    @range.setter
    def range(self,new_value):
        """Sets the Velocity Range"""
        if self.__range.is_item_available(new_value):
            self.__range.set_current_item(new_value)
        else:
            raise ConfigurationError(f"Velocity Range mode not available: {new_value}. Available values: {self.all_range()}.")
    
    def all_range(self):
        """Gets all available settings for property Velocity Range"""
        return self.__range.available_items()
    
    # Tracking Filter
    @property
    def tracking_filter(self):
        """Gets the Tracking Filter"""
        return self.__tracking_filter.current_item()
    
    @tracking_filter.setter
    def tracking_filter(self,new_value):
        """Sets the Tracking Filter"""
        if self.__tracking_filter.is_item_available(new_value):
            self.__tracking_filter.set_current_item(new_value)
        else:
            raise ConfigurationError(f"Tracking Filter mode not available: {new_value}. Available values: {self.all_tracking_filter()}.")
    
    def all_tracking_filter(self):
        """Gets all available settings for property Tracking Filter"""
        return self.__tracking_filter.available_items()
    



class ConfigurationError(Exception):
    """Exception class raised when trying to to setup an invalid configuration"""
    pass
